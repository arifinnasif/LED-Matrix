
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000002b8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a0  008000a0  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a16  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000678  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000529  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001a00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000386  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ab  00000000  00000000  00001eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00002455  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2c 01 	call	0x258	; 0x258 <main>
  8a:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <get_row>:
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            mat[N - 1 - j][j] = temp_mat[i][j];
        }
    }
}
  92:	bc 01       	movw	r22, r24
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e c0       	rjmp	.+28     	; 0xb8 <get_row+0x26>
  9c:	fb 01       	movw	r30, r22
  9e:	e4 0f       	add	r30, r20
  a0:	f5 1f       	adc	r31, r21
  a2:	20 81       	ld	r18, Z
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	04 2e       	mov	r0, r20
  a8:	02 c0       	rjmp	.+4      	; 0xae <get_row+0x1c>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <get_row+0x18>
  b2:	82 2b       	or	r24, r18
  b4:	4f 5f       	subi	r20, 0xFF	; 255
  b6:	5f 4f       	sbci	r21, 0xFF	; 255
  b8:	48 30       	cpi	r20, 0x08	; 8
  ba:	51 05       	cpc	r21, r1
  bc:	7c f3       	brlt	.-34     	; 0x9c <get_row+0xa>
  be:	08 95       	ret

000000c0 <hshift>:
  c0:	cf 92       	push	r12
  c2:	df 92       	push	r13
  c4:	ef 92       	push	r14
  c6:	ff 92       	push	r15
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	c0 54       	subi	r28, 0x40	; 64
  d6:	d1 09       	sbc	r29, r1
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	10 e0       	ldi	r17, 0x00	; 0
  e6:	22 c0       	rjmp	.+68     	; 0x12c <hshift+0x6c>
  e8:	98 01       	movw	r18, r16
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	fc 01       	movw	r30, r24
  f8:	e2 0f       	add	r30, r18
  fa:	f3 1f       	adc	r31, r19
  fc:	e4 0f       	add	r30, r20
  fe:	f5 1f       	adc	r31, r21
 100:	a0 81       	ld	r26, Z
 102:	ee 24       	eor	r14, r14
 104:	e3 94       	inc	r14
 106:	f1 2c       	mov	r15, r1
 108:	ec 0e       	add	r14, r28
 10a:	fd 1e       	adc	r15, r29
 10c:	2e 0d       	add	r18, r14
 10e:	3f 1d       	adc	r19, r15
 110:	f9 01       	movw	r30, r18
 112:	e4 0f       	add	r30, r20
 114:	f5 1f       	adc	r31, r21
 116:	a0 83       	st	Z, r26
 118:	4f 5f       	subi	r20, 0xFF	; 255
 11a:	5f 4f       	sbci	r21, 0xFF	; 255
 11c:	02 c0       	rjmp	.+4      	; 0x122 <hshift+0x62>
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	48 30       	cpi	r20, 0x08	; 8
 124:	51 05       	cpc	r21, r1
 126:	04 f3       	brlt	.-64     	; 0xe8 <hshift+0x28>
 128:	0f 5f       	subi	r16, 0xFF	; 255
 12a:	1f 4f       	sbci	r17, 0xFF	; 255
 12c:	08 30       	cpi	r16, 0x08	; 8
 12e:	11 05       	cpc	r17, r1
 130:	b4 f3       	brlt	.-20     	; 0x11e <hshift+0x5e>
 132:	c1 2c       	mov	r12, r1
 134:	d1 2c       	mov	r13, r1
 136:	37 c0       	rjmp	.+110    	; 0x1a6 <hshift+0xe6>
 138:	a6 01       	movw	r20, r12
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	44 0f       	add	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	48 0f       	add	r20, r24
 148:	59 1f       	adc	r21, r25
 14a:	9f 01       	movw	r18, r30
 14c:	26 1b       	sub	r18, r22
 14e:	37 0b       	sbc	r19, r23
 150:	28 5f       	subi	r18, 0xF8	; 248
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	27 70       	andi	r18, 0x07	; 7
 156:	30 78       	andi	r19, 0x80	; 128
 158:	33 23       	and	r19, r19
 15a:	34 f4       	brge	.+12     	; 0x168 <hshift+0xa8>
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
 160:	28 6f       	ori	r18, 0xF8	; 248
 162:	3f 6f       	ori	r19, 0xFF	; 255
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	86 01       	movw	r16, r12
 16a:	00 0f       	add	r16, r16
 16c:	11 1f       	adc	r17, r17
 16e:	00 0f       	add	r16, r16
 170:	11 1f       	adc	r17, r17
 172:	00 0f       	add	r16, r16
 174:	11 1f       	adc	r17, r17
 176:	a1 e0       	ldi	r26, 0x01	; 1
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	ac 0f       	add	r26, r28
 17c:	bd 1f       	adc	r27, r29
 17e:	0a 0f       	add	r16, r26
 180:	1b 1f       	adc	r17, r27
 182:	20 0f       	add	r18, r16
 184:	31 1f       	adc	r19, r17
 186:	d9 01       	movw	r26, r18
 188:	2c 91       	ld	r18, X
 18a:	4e 0f       	add	r20, r30
 18c:	5f 1f       	adc	r21, r31
 18e:	da 01       	movw	r26, r20
 190:	2c 93       	st	X, r18
 192:	31 96       	adiw	r30, 0x01	; 1
 194:	02 c0       	rjmp	.+4      	; 0x19a <hshift+0xda>
 196:	e0 e0       	ldi	r30, 0x00	; 0
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e8 30       	cpi	r30, 0x08	; 8
 19c:	f1 05       	cpc	r31, r1
 19e:	64 f2       	brlt	.-104    	; 0x138 <hshift+0x78>
 1a0:	bf ef       	ldi	r27, 0xFF	; 255
 1a2:	cb 1a       	sub	r12, r27
 1a4:	db 0a       	sbc	r13, r27
 1a6:	e8 e0       	ldi	r30, 0x08	; 8
 1a8:	ce 16       	cp	r12, r30
 1aa:	d1 04       	cpc	r13, r1
 1ac:	a4 f3       	brlt	.-24     	; 0x196 <hshift+0xd6>
 1ae:	c0 5c       	subi	r28, 0xC0	; 192
 1b0:	df 4f       	sbci	r29, 0xFF	; 255
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	08 95       	ret

000001ce <render>:

void render(unsigned char mat[N][N], int frame_count) {
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	6c 01       	movw	r12, r24
    while (frame_count--) {
 1e0:	2c c0       	rjmp	.+88     	; 0x23a <render+0x6c>
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < 5; ++j) {
                PORTA = (1 << i);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	00 2e       	mov	r0, r16
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <render+0x20>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	0a 94       	dec	r0
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <render+0x1c>
 1f2:	8b bb       	out	0x1b, r24	; 27
                PORTD = ~get_row(mat[i]);
 1f4:	c8 01       	movw	r24, r16
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	8c 0d       	add	r24, r12
 204:	9d 1d       	adc	r25, r13
 206:	0e 94 49 00 	call	0x92	; 0x92 <get_row>
 20a:	80 95       	com	r24
 20c:	82 bb       	out	0x12, r24	; 18
}

void render(unsigned char mat[N][N], int frame_count) {
    while (frame_count--) {
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < 5; ++j) {
 20e:	21 96       	adiw	r28, 0x01	; 1
 210:	02 c0       	rjmp	.+4      	; 0x216 <render+0x48>
 212:	c0 e0       	ldi	r28, 0x00	; 0
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	c5 30       	cpi	r28, 0x05	; 5
 218:	d1 05       	cpc	r29, r1
 21a:	1c f3       	brlt	.-58     	; 0x1e2 <render+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	80 e7       	ldi	r24, 0x70	; 112
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <render+0x52>
 224:	00 c0       	rjmp	.+0      	; 0x226 <render+0x58>
 226:	00 00       	nop
    }
}

void render(unsigned char mat[N][N], int frame_count) {
    while (frame_count--) {
        for (int i = 0; i < N; ++i) {
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	02 c0       	rjmp	.+4      	; 0x232 <render+0x64>
 22e:	00 e0       	ldi	r16, 0x00	; 0
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	08 30       	cpi	r16, 0x08	; 8
 234:	11 05       	cpc	r17, r1
 236:	6c f3       	brlt	.-38     	; 0x212 <render+0x44>
        }
    }
}

void render(unsigned char mat[N][N], int frame_count) {
    while (frame_count--) {
 238:	b7 01       	movw	r22, r14
 23a:	7b 01       	movw	r14, r22
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	e9 1a       	sub	r14, r25
 240:	f1 08       	sbc	r15, r1
 242:	67 2b       	or	r22, r23
 244:	a1 f7       	brne	.-24     	; 0x22e <render+0x60>
                PORTD = ~get_row(mat[i]);
            }
            _delay_ms(2.5);
        }
    }
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	08 95       	ret

00000258 <main>:

int main(void) {
    DDRA = 0xFF;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
 25c:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFE;
 25e:	8e ef       	ldi	r24, 0xFE	; 254
 260:	87 bb       	out	0x17, r24	; 23
	
    while (1) {
        unsigned char in = (PINB & 0x01);
        if (in) {
 262:	b0 9b       	sbis	0x16, 0	; 22
 264:	14 c0       	rjmp	.+40     	; 0x28e <main+0x36>
            shift_status = !shift_status;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__data_end>
 26e:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <__data_end+0x1>
 272:	23 2b       	or	r18, r19
 274:	11 f0       	breq	.+4      	; 0x27a <main+0x22>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
 27e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
            render(mat1, 15);
 282:	6f e0       	ldi	r22, 0x0F	; 15
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e6       	ldi	r24, 0x60	; 96
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <render>
        }
        if (shift_status) {
 28e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 292:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 296:	89 2b       	or	r24, r25
 298:	31 f0       	breq	.+12     	; 0x2a6 <main+0x4e>
            hshift(mat1,-1);
 29a:	6f ef       	ldi	r22, 0xFF	; 255
 29c:	7f ef       	ldi	r23, 0xFF	; 255
 29e:	80 e6       	ldi	r24, 0x60	; 96
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 60 00 	call	0xc0	; 0xc0 <hshift>
        }
        render(mat1, 1);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	80 e6       	ldi	r24, 0x60	; 96
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <render>
    }
 2b2:	d7 cf       	rjmp	.-82     	; 0x262 <main+0xa>

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
