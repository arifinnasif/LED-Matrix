
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000028a  000002fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e5  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068e  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000545  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  000019bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000580  00000000  00000000  00001e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000023ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  7a:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <get_row>:
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            mat[N - 1 - j][j] = temp_mat[i][j];
        }
    }
}
  82:	bc 01       	movw	r22, r24
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e c0       	rjmp	.+28     	; 0xa8 <get_row+0x26>
  8c:	fb 01       	movw	r30, r22
  8e:	e4 0f       	add	r30, r20
  90:	f5 1f       	adc	r31, r21
  92:	20 81       	ld	r18, Z
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	04 2e       	mov	r0, r20
  98:	02 c0       	rjmp	.+4      	; 0x9e <get_row+0x1c>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <get_row+0x18>
  a2:	82 2b       	or	r24, r18
  a4:	4f 5f       	subi	r20, 0xFF	; 255
  a6:	5f 4f       	sbci	r21, 0xFF	; 255
  a8:	48 30       	cpi	r20, 0x08	; 8
  aa:	51 05       	cpc	r21, r1
  ac:	7c f3       	brlt	.-34     	; 0x8c <get_row+0xa>
  ae:	08 95       	ret

000000b0 <hshift>:
  b0:	cf 92       	push	r12
  b2:	df 92       	push	r13
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	c0 54       	subi	r28, 0x40	; 64
  c6:	d1 09       	sbc	r29, r1
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	f8 94       	cli
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	cd bf       	out	0x3d, r28	; 61
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	22 c0       	rjmp	.+68     	; 0x11c <hshift+0x6c>
  d8:	98 01       	movw	r18, r16
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	fc 01       	movw	r30, r24
  e8:	e2 0f       	add	r30, r18
  ea:	f3 1f       	adc	r31, r19
  ec:	e4 0f       	add	r30, r20
  ee:	f5 1f       	adc	r31, r21
  f0:	a0 81       	ld	r26, Z
  f2:	ee 24       	eor	r14, r14
  f4:	e3 94       	inc	r14
  f6:	f1 2c       	mov	r15, r1
  f8:	ec 0e       	add	r14, r28
  fa:	fd 1e       	adc	r15, r29
  fc:	2e 0d       	add	r18, r14
  fe:	3f 1d       	adc	r19, r15
 100:	f9 01       	movw	r30, r18
 102:	e4 0f       	add	r30, r20
 104:	f5 1f       	adc	r31, r21
 106:	a0 83       	st	Z, r26
 108:	4f 5f       	subi	r20, 0xFF	; 255
 10a:	5f 4f       	sbci	r21, 0xFF	; 255
 10c:	02 c0       	rjmp	.+4      	; 0x112 <hshift+0x62>
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	48 30       	cpi	r20, 0x08	; 8
 114:	51 05       	cpc	r21, r1
 116:	04 f3       	brlt	.-64     	; 0xd8 <hshift+0x28>
 118:	0f 5f       	subi	r16, 0xFF	; 255
 11a:	1f 4f       	sbci	r17, 0xFF	; 255
 11c:	08 30       	cpi	r16, 0x08	; 8
 11e:	11 05       	cpc	r17, r1
 120:	b4 f3       	brlt	.-20     	; 0x10e <hshift+0x5e>
 122:	c1 2c       	mov	r12, r1
 124:	d1 2c       	mov	r13, r1
 126:	37 c0       	rjmp	.+110    	; 0x196 <hshift+0xe6>
 128:	a6 01       	movw	r20, r12
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	48 0f       	add	r20, r24
 138:	59 1f       	adc	r21, r25
 13a:	9f 01       	movw	r18, r30
 13c:	26 1b       	sub	r18, r22
 13e:	37 0b       	sbc	r19, r23
 140:	28 5f       	subi	r18, 0xF8	; 248
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	27 70       	andi	r18, 0x07	; 7
 146:	30 78       	andi	r19, 0x80	; 128
 148:	33 23       	and	r19, r19
 14a:	34 f4       	brge	.+12     	; 0x158 <hshift+0xa8>
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	31 09       	sbc	r19, r1
 150:	28 6f       	ori	r18, 0xF8	; 248
 152:	3f 6f       	ori	r19, 0xFF	; 255
 154:	2f 5f       	subi	r18, 0xFF	; 255
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	86 01       	movw	r16, r12
 15a:	00 0f       	add	r16, r16
 15c:	11 1f       	adc	r17, r17
 15e:	00 0f       	add	r16, r16
 160:	11 1f       	adc	r17, r17
 162:	00 0f       	add	r16, r16
 164:	11 1f       	adc	r17, r17
 166:	a1 e0       	ldi	r26, 0x01	; 1
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	ac 0f       	add	r26, r28
 16c:	bd 1f       	adc	r27, r29
 16e:	0a 0f       	add	r16, r26
 170:	1b 1f       	adc	r17, r27
 172:	20 0f       	add	r18, r16
 174:	31 1f       	adc	r19, r17
 176:	d9 01       	movw	r26, r18
 178:	2c 91       	ld	r18, X
 17a:	4e 0f       	add	r20, r30
 17c:	5f 1f       	adc	r21, r31
 17e:	da 01       	movw	r26, r20
 180:	2c 93       	st	X, r18
 182:	31 96       	adiw	r30, 0x01	; 1
 184:	02 c0       	rjmp	.+4      	; 0x18a <hshift+0xda>
 186:	e0 e0       	ldi	r30, 0x00	; 0
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	e8 30       	cpi	r30, 0x08	; 8
 18c:	f1 05       	cpc	r31, r1
 18e:	64 f2       	brlt	.-104    	; 0x128 <hshift+0x78>
 190:	bf ef       	ldi	r27, 0xFF	; 255
 192:	cb 1a       	sub	r12, r27
 194:	db 0a       	sbc	r13, r27
 196:	e8 e0       	ldi	r30, 0x08	; 8
 198:	ce 16       	cp	r12, r30
 19a:	d1 04       	cpc	r13, r1
 19c:	a4 f3       	brlt	.-24     	; 0x186 <hshift+0xd6>
 19e:	c0 5c       	subi	r28, 0xC0	; 192
 1a0:	df 4f       	sbci	r29, 0xFF	; 255
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	df 90       	pop	r13
 1ba:	cf 90       	pop	r12
 1bc:	08 95       	ret

000001be <reset_frame>:

void reset_frame() {
	ROW  = 0x00;
 1be:	1b ba       	out	0x1b, r1	; 27
	COL1 = 0x00;
 1c0:	18 ba       	out	0x18, r1	; 24
 1c2:	08 95       	ret

000001c4 <render>:
}

void render(unsigned char mat[N][N], int frame_count) {
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	8c 01       	movw	r16, r24
    while (frame_count--) {
 1d2:	24 c0       	rjmp	.+72     	; 0x21c <render+0x58>
        for (int i = 0; i < N; ++i) {
            ROW = (1 << i);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0c 2e       	mov	r0, r28
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <render+0x1c>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <render+0x18>
 1e4:	8b bb       	out	0x1b, r24	; 27
            COL1 = ~get_row(mat[i]);
 1e6:	ce 01       	movw	r24, r28
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	80 0f       	add	r24, r16
 1f6:	91 1f       	adc	r25, r17
 1f8:	0e 94 41 00 	call	0x82	; 0x82 <get_row>
 1fc:	80 95       	com	r24
 1fe:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	80 e7       	ldi	r24, 0x70	; 112
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <render+0x40>
 208:	00 c0       	rjmp	.+0      	; 0x20a <render+0x46>
 20a:	00 00       	nop
	COL1 = 0x00;
}

void render(unsigned char mat[N][N], int frame_count) {
    while (frame_count--) {
        for (int i = 0; i < N; ++i) {
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	02 c0       	rjmp	.+4      	; 0x214 <render+0x50>
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	c8 30       	cpi	r28, 0x08	; 8
 216:	d1 05       	cpc	r29, r1
 218:	ec f2       	brlt	.-70     	; 0x1d4 <render+0x10>
	ROW  = 0x00;
	COL1 = 0x00;
}

void render(unsigned char mat[N][N], int frame_count) {
    while (frame_count--) {
 21a:	b7 01       	movw	r22, r14
 21c:	7b 01       	movw	r14, r22
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	e9 1a       	sub	r14, r25
 222:	f1 08       	sbc	r15, r1
 224:	67 2b       	or	r22, r23
 226:	a1 f7       	brne	.-24     	; 0x210 <render+0x4c>
            ROW = (1 << i);
            COL1 = ~get_row(mat[i]);
			_delay_ms(2.5);
        }
    }
    reset_frame();
 228:	0e 94 df 00 	call	0x1be	; 0x1be <reset_frame>
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	08 95       	ret

0000023a <main>:

int main(void) {
    DDRA = 0xFF;
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 23e:	87 bb       	out	0x17, r24	; 23
	
    while (1) {
        for (int i = 0; i < 8; i = (i + 1) % 8) {
 240:	c0 e0       	ldi	r28, 0x00	; 0
 242:	d0 e0       	ldi	r29, 0x00	; 0
 244:	1c c0       	rjmp	.+56     	; 0x27e <main+0x44>
            render(mat1, (i == 0 ? 200 : 25));
 246:	20 97       	sbiw	r28, 0x00	; 0
 248:	19 f4       	brne	.+6      	; 0x250 <main+0x16>
 24a:	68 ec       	ldi	r22, 0xC8	; 200
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <main+0x1a>
 250:	69 e1       	ldi	r22, 0x19	; 25
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	80 e6       	ldi	r24, 0x60	; 96
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <render>
            hshift(mat1, 1);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	80 e6       	ldi	r24, 0x60	; 96
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 58 00 	call	0xb0	; 0xb0 <hshift>
int main(void) {
    DDRA = 0xFF;
	DDRB = 0xFF;
	
    while (1) {
        for (int i = 0; i < 8; i = (i + 1) % 8) {
 268:	ce 01       	movw	r24, r28
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	87 70       	andi	r24, 0x07	; 7
 26e:	90 78       	andi	r25, 0x80	; 128
 270:	99 23       	and	r25, r25
 272:	24 f4       	brge	.+8      	; 0x27c <main+0x42>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	88 6f       	ori	r24, 0xF8	; 248
 278:	9f 6f       	ori	r25, 0xFF	; 255
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	ec 01       	movw	r28, r24
 27e:	c8 30       	cpi	r28, 0x08	; 8
 280:	d1 05       	cpc	r29, r1
 282:	0c f3       	brlt	.-62     	; 0x246 <main+0xc>
 284:	dd cf       	rjmp	.-70     	; 0x240 <main+0x6>

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
